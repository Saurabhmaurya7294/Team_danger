import os
import psutil
import threading
import time
import tkinter as tk
from tkinter import filedialog, scrolledtext
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from datetime import datetime
import yara
import hashlib
import csv
import requests

# ----------------- Configuration -----------------
SUSPICIOUS_EXTENSIONS = {'.locked', '.enc', '.crypt', '.crypto', '.ransom'}
LOGS_DIR = os.path.join(os.path.dirname(__file__), 'logs')
os.makedirs(LOGS_DIR, exist_ok=True)
LOG_FILE = os.path.join(LOGS_DIR, "scan_log.csv")
YARA_RULES = "rules.yar"
VIRUSTOTAL_API_KEY = "YOUR_API_KEY_HERE"  # Replace with your real one

# ----------------- Logging -----------------
def log_event(log_widget, message, tag):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    full_message = f"{timestamp} - {message}"

    with open(LOG_FILE, mode='a', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow([timestamp, message, tag])

    if log_widget:
        log_widget.insert(tk.END, full_message + "\n", tag)
        log_widget.yview(tk.END)

# ----------------- VirusTotal Hash Check -----------------
def check_virustotal(file_path):
    try:
        with open(file_path, "rb") as f:
            file_hash = hashlib.sha256(f.read()).hexdigest()

        url = f"https://www.virustotal.com/api/v3/files/{file_hash}"
        headers = {"x-apikey": VIRUSTOTAL_API_KEY}
        resp = requests.get(url, headers=headers)
        if resp.status_code == 200:
            data = resp.json()
            return data["data"]["attributes"]["last_analysis_stats"]
    except Exception as e:
        return {"error": str(e)}
    return None

# ----------------- YARA Scan -----------------
def scan_file_with_yara(file_path):
    try:
        if not os.path.exists(YARA_RULES):
            return []
        rules = yara.compile(filepath=YARA_RULES)
        return rules.match(filepath=file_path)
    except Exception:
        return []

# ----------------- Behavior Monitor -----------------
def detect_suspicious_processes():
    flagged = []
    for proc in psutil.process_iter(['pid', 'name']):
        try:
            name = proc.info['name'].lower()
            if any(term in name for term in ['keylogger', 'ransom', 'stealer', 'locker', 'encrypt']):
                flagged.append(proc.info)
        except:
            continue
    return flagged

# ----------------- Ransomware Blocker -----------------
def block_ransomware():
    for proc in psutil.process_iter(['pid', 'name']):
        try:
            if any(term in proc.info['name'].lower() for term in ['ransom', 'locker', 'encrypt']):
                psutil.Process(proc.info['pid']).terminate()
        except:
            continue

# ----------------- Real-Time Monitor -----------------
class RansomwareWatcher(FileSystemEventHandler):
    def __init__(self, log_widget):
        self.log_widget = log_widget

    def on_modified(self, event):
        if not event.is_directory:
            _, ext = os.path.splitext(event.src_path)
            if ext in SUSPICIOUS_EXTENSIONS:
                log_event(self.log_widget, f"‚ö†Ô∏è Suspicious file modified: {event.src_path}", "high")
                block_ransomware()

def start_file_monitoring(log_widget):
    observer = Observer()
    handler = RansomwareWatcher(log_widget)
    observer.schedule(handler, path=os.path.expanduser("~"), recursive=True)
    observer.start()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

# ----------------- Manual System Scan -----------------
def start_manual_scan(log_widget):
    root_dirs = [os.path.expanduser("~")]
    for root_dir in root_dirs:
        for root, _, files in os.walk(root_dir):
            for file in files:
                path = os.path.join(root, file)
                _, ext = os.path.splitext(path)
                if ext in SUSPICIOUS_EXTENSIONS:
                    log_event(log_widget, f"‚ö†Ô∏è Suspicious file found: {path}", "high")
                    block_ransomware()
                else:
                    log_event(log_widget, f"Scanned: {path}", "low")

# ----------------- File Scan Trigger -----------------
def scan_single_file(log_widget):
    file_path = filedialog.askopenfilename()
    if not file_path:
        return

    log_event(log_widget, f"üîç Scanning file: {file_path}", "info")

    vt_result = check_virustotal(file_path)
    if vt_result:
        if "error" in vt_result:
            log_event(log_widget, f"‚ùå VirusTotal error: {vt_result['error']}", "high")
        else:
            log_event(log_widget, f"üß™ VirusTotal result: {vt_result}", "info")
            if vt_result.get('malicious', 0) > 0:
                log_event(log_widget, f"‚ö†Ô∏è File flagged as malicious by VirusTotal", "high")

    yara_matches = scan_file_with_yara(file_path)
    if yara_matches:
        for match in yara_matches:
            log_event(log_widget, f"‚ö†Ô∏è YARA Rule Matched: {match.rule}", "high")
    else:
        log_event(log_widget, f"‚úÖ No YARA match", "low")

# ----------------- GUI -----------------
def start_gui():
    root = tk.Tk()
    root.title("üõ°Ô∏è Unified Malware & Ransomware Detector")
    root.geometry("900x600")
    root.configure(bg="#1e1e1e")

    label = tk.Label(root, text="üõ°Ô∏è Real-time Malware Monitor", font=("Arial", 18, "bold"), fg="white", bg="#1e1e1e")
    label.pack(pady=10)

    log_widget = scrolledtext.ScrolledText(root, height=25, width=110, bg="#121212", fg="white", font=("Consolas", 10))
    log_widget.pack(pady=10)
    log_widget.tag_config("high", foreground="red")
    log_widget.tag_config("low", foreground="green")
    log_widget.tag_config("info", foreground="cyan")

    button_frame = tk.Frame(root, bg="#1e1e1e")
    button_frame.pack(pady=10)

    tk.Button(button_frame, text="üß™ Scan File", command=lambda: scan_single_file(log_widget),
              bg="#33ccff", fg="black", font=("Arial", 10, "bold"), width=18).grid(row=0, column=0, padx=5)

    tk.Button(button_frame, text="üîç Full System Scan", command=lambda: threading.Thread(target=start_manual_scan, args=(log_widget,), daemon=True).start(),
              bg="#66ff66", fg="black", font=("Arial", 10, "bold"), width=18).grid(row=0, column=1, padx=5)

    tk.Button(button_frame, text="üö´ Kill Malware", command=block_ransomware,
              bg="#ff4d4d", fg="white", font=("Arial", 10, "bold"), width=18).grid(row=0, column=2, padx=5)

    tk.Button(button_frame, text="üìÑ View Log", command=lambda: os.system(f'notepad.exe "{LOG_FILE}"'),
              bg="#ffcc00", fg="black", font=("Arial", 10, "bold"), width=18).grid(row=0, column=3, padx=5)

    threading.Thread(target=start_file_monitoring, args=(log_widget,), daemon=True).start()

    root.mainloop()

# ----------------- Main -----------------
if __name__ == "__main__":
    start_gui()
